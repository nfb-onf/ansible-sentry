---
# vim:sw=2:ft=ansible
- name: Ensure sentry user exists
  user: name={{sentry_user}}

- name: Ensure sentry directories exists
  file: state=directory path={{sentry_home}} owner={{sentry_user}}

- name: Ensure sentry static dir exists
  file: state=directory path={{sentry_home}}/_static owner={{sentry_user}}

- name: Ensure sentry conf dir exists
  file: state=directory path={{sentry_home}}/conf owner={{sentry_user}}

- name: Ensure sentry logfile dir exists
  file: state=directory path={{sentry_logfile_dir}} owner={{sentry_user}} recurse=yes
  when: sentry_logfile_dir != ""

# Try to create virtualenv only if it doesn't exist.
# This way we can re-run the playbook without errors.
- name: Check existince of Sentry virtualenv
  stat: path={{sentry_home}}/env
  register: sentry_has_virtualenv
  become: yes
  become_user: "{{sentry_user}}"

- name: Install virtualenv
  apt: pkg=python-virtualenv
  when: sentry_has_virtualenv.stat.exists == False and ansible_os_family == 'Debian'

- name: Create virtualenv for Sentry using chosen Python
  shell: virtualenv --python={{sentry_python}} {{sentry_home}}/env
  become: yes
  become_user: "{{sentry_user}}"
  when: sentry_has_virtualenv.stat.exists == False

- name: Install redis
  pip: name=redis version=2.10.5 virtualenv="{{sentry_home}}/env"
  become: yes

- name: Install Sentry
  pip: name=sentry version={{sentry_version}} virtualenv="{{sentry_home}}/env"
  become: yes
  become_user: "{{sentry_user}}"
  notify: [sentry restart]

- name: Install extensions
  pip: name={{item}} virtualenv="{{sentry_home}}/env"
  with_items: "{{sentry_extensions}}"
  notify: [sentry restart]

- name: Configure Sentry pt.1
  template: src=config.yml.j2 dest={{sentry_home}}/conf/config.yml owner={{sentry_user}}
  notify: [sentry restart]

- name: Configure Sentry pt.2
  template: src=sentry.conf.py.j2 dest={{sentry_home}}/conf/sentry.conf.py owner={{sentry_user}}
  notify: [sentry restart]

- name: Configure Supervisor
  template: src=supervisor.conf.j2 dest={{supervisor_incdir}}/sentry.conf

- name: Ensure sentry directory owner
  file: state=directory path={{sentry_home}} owner={{sentry_user}} recurse=yes

- name: Upgrade sentry
  shell: "SENTRY_CONF={{sentry_home}}/conf {{sentry_home}}/env/bin/sentry upgrade --noinput"
  register: sentry_upgrade
  changed_when: sentry_upgrade.rc
  become: yes
  become_user: "{{sentry_user}}"

- name: Clean Sentry Database
  cron: job="SENTRY_CONF={{sentry_home}}/conf {{sentry_home}}/env/bin/sentry cleanup --days=30" minute=0 hour=0 user={{sentry_user}}
  when: sentry_cron

- name: Collect sentry static files
  shell: "SENTRY_CONF={{sentry_home}}/conf {{sentry_home}}/env/bin/sentry django collectstatic --noinput"
  register: sentry_collected
  changed_when: not sentry_collected.stderr.startswith('\n0 static files copied')
  become: yes
  become_user: "{{sentry_user}}"

- name: Create nginx public key
  copy: content="{{ sentry_nginx_public_key }}" dest="{{ sentry_ssl_certificate }}"
  when: sentry_nginx_public_key is defined and sentry_ssl_certificate

- name: Create nginx private key
  copy: content="{{ sentry_nginx_private_key }}" dest="{{ sentry_ssl_certificate_key }}"
  when: sentry_nginx_private_key is defined and sentry_ssl_certificate_key

- name: Configure Nginx
  template: src=nginx.conf.j2 dest={{nginx_dir|default('/etc/nginx')}}/sites-enabled/sentry.conf
  notify: [nginx reload]
  when: nginx_enabled
